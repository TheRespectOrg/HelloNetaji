{"version":3,"sources":["logo.svg","Netas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","netas","allNetas","Netas","axios","get","response","status","data","this","setState","console","log","error","getNetas","value","toUpperCase","filteredNetas","filter","neta","ACName","includes","Party","Mobile","toString","Email","Twitter","Address","className","type","onInput","e","filterNetas","target","placeholder","name","map","i","key","_id","data-toggle","data-target","aria-expanded","aria-controls","No","href","id","React","Component","App","class","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e720a594.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport axios from 'axios';\n\nlet netas = [], allNetas = [];\n\nexport default class Netas extends React.Component {\n\n    async getNetas() {\n        try {\n\n            const response = await axios.get(`//hellonetaji.therespect.org/api/politicians`);\n\n            if (response.status === 200) {\n                /* Map the response to IShariahStocks */\n                allNetas = netas = response.data;\n                this.setState({ netas });\n            }\n\n        } catch (ex) {\n            console.log(ex);\n            this.setState({ error: 'An error occured' });\n        }\n    }\n\n    componentDidMount() {\n        this.getNetas();\n    }\n\n    filterNetas(value) {\n        value = value.toUpperCase();\n        let filteredNetas = allNetas.filter((neta) => {\n            return neta.ACName.toUpperCase().includes(value) ||\n                neta.Party.toUpperCase().includes(value) ||\n                neta.Mobile.toString().toUpperCase().includes(value) ||\n                neta.Email.toUpperCase().includes(value) ||\n                neta.Twitter.toUpperCase().includes(value) ||\n                neta.Address.toUpperCase().includes(value);\n        });\n        netas = filteredNetas;\n        this.setState({ netas: filteredNetas });\n    }\n\n    render() {\n        return (\n            <div className=\"row mt-4\">\n                <div className=\"col-sm-1\"></div>\n\n                <div className=\"col-sm-12\">\n                    <div>\n                        <div className=\"input-group\">\n                            <input type=\"text\" onInput={(e) => {\n                                this.filterNetas(e.target.value);\n                            }\n                            } className=\"form-control\" placeholder=\"search for your MLA from Maharashtra here\" name=\"search\" />\n                            <div className=\"input-group-btn\">\n                                <button className=\"btn btn-default\" type=\"submit\"><i className=\"fas fa-search\"></i></button>\n                            </div>\n                        </div>\n\n                        {netas && netas.map((neta, i) =>\n\n                            <div key={`${neta._id}-${neta.ACName}`} className='mt-3'>\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <div data-toggle=\"collapse\" data-target={`#collapse${neta._id}-${neta.ACName}`} aria-expanded=\"false\" aria-controls={`#collapse${neta._id}-${neta.ACName}`}>\n                                            <small> <sup className='text-muted'>\n                                                {neta.No}\n                                            </sup>\n                                            </small>\n\n                                            <label className='ml-3'> {neta['Sitting MLAs']} <small>({neta.Party}) from {neta.ACName}</small> </label>\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        <ul>\n                                            {neta.Mobile && <li>\n                                                <small>phone:</small> <a href={`tel:${neta.Mobile}`}>{neta.Mobile}</a>\n                                            </li>}\n\n                                            {neta.Email && <li>\n                                                <small>email:</small> <a href={`mailto:${neta.Email}`}>{neta.Email}</a>\n                                            </li>}\n\n                                            {neta.Twitter && <li>\n                                                <small>social:</small> {neta.Twitter}\n                                            </li>}\n\n                                            {neta.Address && <li>\n                                                <small>address:</small> {neta.Address}\n                                            </li>}\n                                        </ul>\n\n                                    </div>\n                                </div>\n                                <div className=\"stock-details collapse mt-3\" id={`collapse${neta._id}-${neta.ACName}`}>\n                                    <div className=\"row\">\n                                        <div className=\"col-md-12 border\">\n                                            <div id={`chart${neta._id}-${neta.ACName}`}></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                        )}\n                    </div>\n\n                </div>\n                <div className=\"col-sm-1\"></div>\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Netas from './Netas';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div class=\"jumbotron text-center\">\n        <h1>Hello Netaji!</h1>\n        <p>NPR 2020 se NRC banega <a href=\"https://twitter.com/intent/tweet?url=http%3A%2F%2Fhellonetaji.therespect.org%2F&text=Dear%20Netaji!%20Please%20stop%20NPR%20in%20Maharashtra%20Assembly.%20NPR%20is%20the%20first%20step%20of%20NRC%20which%20will%20mark%20people%20as%20doubtful%20citizens!%20%23HelloNetaji%20%23noNPR%20%23noNRC%20Find%20your%20Neta%20at%20\">#NoNPR</a></p>\n      </div>\n\n      <div class=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-1\"></div>\n\n          <div className=\"col-sm-10\">\n            <p>\n            Our MLAs are law makers. We elect them to represent us and issues that concern us. The beauty of a federal democratic state is that you can and you must be connected to your elected representative.\n                        </p>\n            <Netas />\n\n            <hr style={{ margin: '3em' }} />\n\n          </div>\n          <div className=\"col-sm-1\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'; //Bootstrap\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}