{"version":3,"sources":["logo.svg","Petition.js","Netas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Petition","e","preventDefault","console","log","target","name","value","mailToLink","encodeURI","window","location","href","this","params","Form","onSubmit","filePetition","className","Label","Group","Control","type","placeholder","required","Button","variant","React","Component","netas","allNetas","Netas","axios","get","response","status","data","setState","error","getNetas","toUpperCase","filteredNetas","filter","neta","ACName","includes","Party","Mobile","toString","Email","Twitter","Address","onInput","filterNetas","map","i","key","_id","No","id","politician","App","style","margin","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2f80bf39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nexport default class Petition extends React.Component {\n    filePetition(e) {\n        e.preventDefault();\n        console.log(e.target.name.value);\n        // console.log(e.target.email.value);\n        // console.log(e.target.pincode.value);\n        // console.log(e.target.phone.value);\n        // debugger\n\n        let mailToLink = encodeURI(\n            `mailto:chiefminister@maharashtra.gov.in,cm@maharashtra.gov.in?cc=adityathackeray@me.com,bbtsangamner@gmail.com,pawars@sansad.nic.in,sec_socjustice@maharashtra.gov.in\n&subject=Petition to pass a resolution against CAA, NRC and NPR\n&body=Dear Sir,\\n\n        \nWe the people of Maharashtra have deep faith in the MVA government. We hope that the government will listen to the voices of the people protesting againstÂ CAA, NRC and NPR across Maharashtra as well as across India and worldwide.\\n\nWe sincerely request you to kindly pass an anti-CAA resolution in the Maharashtra assembly. Also, do stop the process of NPR as NPR is the base of NRC.\\n\n        \nThanks and regards,\\n        \n${e.target.name.value}`);\n\n        window.location.href = mailToLink;\n    }\n\n    render() {\n        debugger\n        console.log('Neta', this.params);\n\n        return (\n            <div >\n                <p>Enter your name to file a petition to Maharashtra's MVA government!</p>\n\n                <Form onSubmit={this.filePetition}>\n                    <div className=\"row\">\n                        {/* <div className=\"col-md-6\"> */}\n                        <div className=\"col-md-4\">\n                            <Form.Label>Enter your name</Form.Label>\n                        </div>\n\n                        <div className=\"col-md-4\">\n                            <Form.Group>\n                                <Form.Control name=\"name\" type=\"text\" placeholder=\"name*\" required />\n                            </Form.Group>\n                        </div>\n\n                        <div className=\"col-md-4\">\n                            <Button variant=\"primary\" type=\"submit\"> Submit petition </Button>\n                        </div>\n\n\n                        {/* <Form.Group>\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control name=\"email\" type=\"email\" placeholder=\"email*\" required />\n                                <Form.Text className=\"text-muted\">\n                                    We'll never share your email with anyone else.\n    </Form.Text>\n                            </Form.Group> */}\n                        {/* </div> */}\n                        {/* <div className=\"col-md-6\">\n                            <Form.Group>\n                                <Form.Label>Pin code</Form.Label>\n                                <Form.Control name=\"pincode\" type=\"text\" placeholder=\"pin code\" required />\n                            </Form.Group>\n\n                            <Form.Group>\n                                <Form.Label>Phone</Form.Label>\n                                <Form.Control name=\"phone\" type=\"text\" placeholder=\"Phone\" required />\n                            </Form.Group>\n\n                        </div> */}\n\n                    </div>\n                </Form>\n\n\n\n            </div>);\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport Petition from './Petition';\n\nlet netas = [], allNetas = [];\n\nexport default class Netas extends React.Component {\n\n    async getNetas() {\n        try {\n\n            const response = await axios.get(`//hellonetaji.therespect.org/api/politicians`);\n\n            if (response.status === 200) {\n                /* Map the response to IShariahStocks */\n                allNetas = netas = response.data;\n                this.setState({ netas });\n            }\n\n        } catch (ex) {\n            console.log(ex);\n            this.setState({ error: 'An error occured' });\n        }\n    }\n\n    componentDidMount() {\n        this.getNetas();\n    }\n\n    filterNetas(value) {\n        value = value.toUpperCase();\n        let filteredNetas = allNetas.filter((neta) => {\n            return neta.ACName.toUpperCase().includes(value) ||\n                neta.Party.toUpperCase().includes(value) ||\n                neta.Mobile.toString().toUpperCase().includes(value) ||\n                neta.Email.toUpperCase().includes(value) ||\n                neta.Twitter.toUpperCase().includes(value) ||\n                neta.Address.toUpperCase().includes(value);\n        });\n        netas = filteredNetas;\n        this.setState({ netas: filteredNetas });\n    }\n\n    render() {\n        return (\n            <div className=\"row mt-4\">\n                <div className=\"col-sm-1\"></div>\n\n                <div className=\"col-sm-12\">\n                    <div>\n\n                        <div className=\"input-group\">\n                            <input type=\"text\" onInput={(e) => {\n                                this.filterNetas(e.target.value);\n                            }\n                            } className=\"form-control\" placeholder=\"search for your MLA from Maharashtra here (contact us on social media for data addition for other states)\" name=\"search\" />\n                            <div className=\"input-group-btn\">\n                                <button className=\"btn btn-default\" type=\"submit\"><i className=\"fas fa-search\"></i></button>\n                            </div>\n                        </div>\n\n                        {netas && netas.map((neta, i) =>\n\n                            <div key={`${neta._id}-${neta.ACName}`} className='mt-3'>\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <div>\n                                            <small> <sup className='text-muted'>\n                                                {neta.No}\n                                            </sup>\n                                            </small>\n\n                                            <label className='ml-3'> {neta['Sitting MLAs']} <small>({neta.Party}) from {neta.ACName}</small> </label>\n\n                                            {/* <br />\n                                            <button className=\"btn btn-primary\" data-toggle=\"collapse\" data-target={`#collapse${neta._id}-${neta.ACName}`} aria-expanded=\"false\" aria-controls={`#collapse${neta._id}-${neta.ACName}`}>file petition</button> */}\n\n\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        <ul>\n                                            {neta.Mobile && <li>\n                                                <small>phone:</small> <a href={`tel:${neta.Mobile}`}>{neta.Mobile}</a>\n                                            </li>}\n\n                                            {neta.Email && <li>\n                                                <small>email:</small>\n                                                <a href={`mailto:${neta.Email}`}>{neta.Email}</a>\n                                            </li>}\n\n                                            {neta.Twitter && <li>\n                                                <small>social:</small> {neta.Twitter}\n                                            </li>}\n\n                                            {neta.Address && <li>\n                                                <small>address:</small> {neta.Address}\n                                            </li>}\n                                        </ul>\n\n                                    </div>\n                                </div>\n\n                                <div className=\"collapse mt-3\" id={`collapse${neta._id}-${neta.ACName}`}>\n                                    <Petition politician={neta} />\n                                </div>\n                            </div>\n\n                        )}\n                    </div>\n\n                </div>\n                <div className=\"col-sm-1\"></div>\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Netas from './Netas';\nimport Petition from './Petition';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <a href=\"https://www.instagram.com/hellonetaji/\"><i className=\"fab fa-instagram\"></i> HelloNetaji </a>\n        <a href=\"https://facebook.com/HelloNetaji-102682481335358/\"><i className=\"fab fa-facebook\"></i> HelloNetaji </a>\n        <a href=\"https://twitter.com/netajihello\"><i className=\"fab fa-twitter\"></i> NetajiHello </a>\n        <label className=\"float-right\" >v1.0.2</label>\n      </div>\n      <div className=\"jumbotron text-center\">\n        <h1>Hello Netaji!</h1>\n        <p><a href=\"https://en.wikipedia.org/wiki/National_Register_of_Citizens\"> NPR</a> 2020 se NRC banega <a href=\"https://twitter.com/intent/tweet?url=http%3A%2F%2Fhellonetaji.therespect.org%2F&text=Dear%20Netaji!%20Please%20stop%20NPR%20in%20Maharashtra%20Assembly.%20NPR%20is%20the%20first%20step%20of%20NRC%20which%20will%20mark%20people%20as%20doubtful%20citizens!%20%23HelloNetaji%20%23noNPR%20%23noNRC%20Find%20your%20Neta%20at%20\">#NoNPR</a></p>\n\n        <Petition />\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-1\"></div>\n\n          <div className=\"col-sm-10\">\n            <p>\n              Our MLAs are law makers. We elect them to represent us and issues that concern us. The beauty of a federal democratic state is that you can and you must be connected to your elected representative.\n                        </p>\n\n\n            <Netas />\n\n            <hr style={{ margin: '3em' }} />\n\n          </div>\n          <div className=\"col-sm-1\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'; //Bootstrap\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}